<window id="canvasBoardWindow" apply="demo.canvas4z.zkpaint.CanvasBoardController" 
	xmlns:w="http://www.zkoss.org/2005/zk/client">
	
	<label id="shapeDataLb" visible="false" />
	<script defer="true"><![CDATA[
		
		// predefined shapes
		frame = new canvas.Rectangle(0,0,0,0).setDrawingType("stroke");
		drws = jq.evalJSON(this.$f('shapeDataLb').getValue());
		
		// cache
		cvs2 = this.$f('cvs2');
		cvsPos = getElementPos(cvs2.$n());
		
		// global state
		start = {x:0, y:0};
		
		text = new canvas.Text("ZK not just UI", 0, 0);
		text.setDrawingType("stroke");
		text.setFont("30px serif");
		
		sindex = 0;
		shape = drws[0];
		path2 = new canvas.Path();
		
	]]></script>
	
	<div>
		<canvas id="cvs1" width="800px" height="500px" 
			style="position:absolute; left:10px; top:10px; z-index:1; 
			background-color:white" />
		<canvas id="cvs2" width="800px" height="500px" 
			style="position:absolute; left:10px; top:10px; z-index:2" >

<attribute w:name="onClick"><![CDATA[
	if(mode == "to-text"){
		// send event to server
		var pos = getMousePos(event, cvsPos);
		zAu.send(new zk.Event(zk.Widget.$(this), 'onAddText', [pos.x, pos.y, text.state.alfa]));
	}
	if(mode == "to-select-s"){
		// send event to server
		var pos = getMousePos(event, cvsPos);
		zAu.send(new zk.Event(zk.Widget.$(this), 'onSingleSelect', [pos.x, pos.y]));
	}
]]></attribute>
<attribute w:name="onMouseDown"><![CDATA[
	if(mode == "to-draw") {
		mode = "drawing";
		
		var pos = getMousePos(event, cvsPos);
		start.x = pos.x;
		start.y = pos.y;
		
		sindex = this.$f('shapeBox', true).getSelectedIndex();
		shape = drws[sindex];
		
		// get drawing state
		fillType = this.$f('fillTypeBox', true).getSelectedIndex();
		strokeType = this.$f('strokeTypeBox', true).getSelectedIndex();
		
		shape.state.dwtp = getDrawingType(fillType, strokeType);
		shape.state.fil = this.$f('fillColorBox', true)._currColor.getHex();
		shape.state.strk = this.$f('strokeColorBox', true)._currColor.getHex();
		shape.state.alfa = this.$f('alphaSlider', true).getCurpos()/100;
		
		// prepare shape
		if(shape.objtp == "rect"){
			shape.obj.x = start.x;
			shape.obj.y = start.y;
		} else {
			path2._copyObj(shape);
			path2._copyState(shape);
		}
		
	}
	if(mode == "to-select") {
		mode = "selecting";
		
		var pos = getMousePos(event, cvsPos);
		start.x = pos.x;
		start.y = pos.y;
		frame.setPos(start.x, start.y);
	}
]]></attribute>
<attribute w:name="onMouseMove"><![CDATA[
	if(mode == "to-text") {
		var pos = getMousePos(event, cvsPos);
		cvs2.clear();
		cvs2.add(text.setPos(pos.x,pos.y));
	}
	if(mode == "drawing") {
		var pos = getMousePos(event, cvsPos);
		var size = {x: pos.x - start.x, y: pos.y - start.y};
		
		if(shape.objtp == "rect"){
			shape.obj.w = size.x;
			shape.obj.h = size.y;
			
			cvs2.clear();
			cvs2.add(shape);
		} else {
			transformPath(shape, path2, size.x/1000, size.y/1000, start.x, start.y)
			
			cvs2.clear();
			cvs2.add(path2);
		}
		
	}
	if(mode == "selecting") {
		var pos = getMousePos(event, cvsPos);
		
		cvs2.clear();
		cvs2.add(frame.setSize(pos.x - start.x, pos.y - start.y));
	}
]]></attribute>
<attribute w:name="onMouseUp"><![CDATA[
	if(mode == "drawing") {
		mode = "to-draw";
		cvs2.clear();
		
		// send shape param to server
		var pos = getMousePos(event, cvsPos);
		zAu.send(new zk.Event(zk.Widget.$(this), 'onAddShape',
				[sindex, start.x, start.y, pos.x-start.x, pos.y-start.y, shape.state.alfa]));
	}
	if(mode == "selecting") {
		mode = "to-select";
		cvs2.clear();
		
		// send selected region param to server
		var pos = getMousePos(event, cvsPos);
		zAu.send(new zk.Event(zk.Widget.$(this), 'onBatchSelect',
				[start.x, start.y, pos.x, pos.y]));
	}
]]></attribute>
<attribute w:name="onMouseOut"><![CDATA[
	// cancels current action except to-text
	cvs2.clear();
	if(mode == "selecting") mode = "to-select";
	if(mode == "drawing") mode = "to-draw";
]]></attribute>

		</canvas>
	</div>
	<script><![CDATA[
		function getMousePos(e, refPos) {
			var pos = {x:0, y:0};
			if (!refPos) var refPos = {x:0, y:0};
			if (!e) var e = window.event;
			if (e.pageX || e.pageY) {
				pos.x = e.pageX - refPos.x;
				pos.y = e.pageY - refPos.y;
			} else if (e.clientX || e.clientY) {
				pos.x = e.clientX + document.body.scrollLeft
					+ document.documentElement.scrollLeft - refPos.x;;
				pos.y = e.clientY + document.body.scrollTop
					+ document.documentElement.scrollTop - refPos.y;;
			}
			return pos;
		}
		function getElementPos(elem) {
			var pos = {x:0, y:0};
			while(elem != null) {
				pos.x += elem.offsetLeft;
				pos.y += elem.offsetTop;
				elem = elem.offsetParent;
			}
			return pos;
		}
		function getDrawingType(f,s){
			switch((f>0)*2 + (s>0)){
			case 0:
				return "none";
			case 1:
				return "stroke";
			case 2:
				return "fill";
			case 3:
				return "both";
			}
		}
		function transformPath(p1,p2,a,b,dx,dy){
			var sg1 = p1.obj.sg;
			var sg2 = p2.obj.sg;
			for(var i=sg2.length;i--;){
				for(var j=sg2[i].dt.length/2;j--;){
					sg2[i].dt[2*j]   = a*sg1[i].dt[2*j]   + dx;
					sg2[i].dt[2*j+1] = b*sg1[i].dt[2*j+1] + dy;
				}
			}
		}
	]]></script>
</window>
